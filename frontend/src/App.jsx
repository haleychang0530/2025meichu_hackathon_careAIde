import { useState, useRef, useEffect } from "react";
import "./App.css";

export default function App() {
  const [messages, setMessages] = useState([]);
  const [listening, setListening] = useState(false);
  const [inputText, setInputText] = useState("");
  const [showLogo, setShowLogo] = useState(true);
  const [email, setEmail] = useState("");
  const [showSettings, setShowSettings] = useState(false);
  const [voiceLanguage, setVoiceLanguage] = useState("chinese");
  const [demoMode, setDemoMode] = useState(false);
  const [isAiThinking, setIsAiThinking] = useState(false);

  const [showTechSteps, setShowTechSteps] = useState(false);
  const [techSteps, setTechSteps] = useState([]);
  const [completedSteps, setCompletedSteps] = useState([]);
  const [currentTechMessageId, setCurrentTechMessageId] = useState(null);
  const [isLocalDemo, setIsLocalDemo] = useState(false);

  const chatContainerRef = useRef(null);
  const recognitionRef = useRef(null);
  const settingsTimerRef = useRef(null);

  const parseMarkdown = (text) => {
    text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    text = text.replace(/__(.*?)__/g, '<strong>$1</strong>');
    text = text.replace(/\*(.*?)\*/g, '<em>$1</em>');
    text = text.replace(/_(.*?)_/g, '<em>$1</em>');
    text = text.replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>');
    text = text.replace(/`([^`]+)`/g, '<code>$1</code>');
    text = text.replace(/^### (.*$)/gim, '<h3>$1</h3>');
    text = text.replace(/^## (.*$)/gim, '<h2>$1</h2>');
    text = text.replace(/^# (.*$)/gim, '<h1>$1</h1>');
    text = text.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>');
    text = text.replace(/\n/g, '<br>');
    text = text.replace(/^[\s]*[-*]\s(.*)$/gim, '<li>$1</li>');
    text = text.replace(/(<li>.*<\/li>)/s, '<ul>$1</ul>');
    text = text.replace(/^[\s]*\d+\.\s(.*)$/gim, '<li>$1</li>');
    return text;
  };

  const MessageContent = ({ text, type, messageId, isTechRelated }) => {
    if (type === 'ai') {
      return (
        <div>
          <div
            dangerouslySetInnerHTML={{
              __html: parseMarkdown(text)
            }}
          />
          {isTechRelated && (
            <div className="tech-support-prompt">
              <button
                className="expand-steps-btn"
                onClick={() => toggleTechSteps(messageId)}
              >
                {showTechSteps && currentTechMessageId === messageId
                  ? 'Êî∂Ëµ∑Ëß£Ê±∫Ê≠•È©ü'
                  : 'üìã Â±ïÈñãËß£Ê±∫Ê≠•È©ü'
                }
              </button>
            </div>
          )}
        </div>
      );
    }
    return <span>{text}</span>;
  };

  const toggleTechSteps = (messageId) => {
    if (showTechSteps && currentTechMessageId === messageId) {
      setShowTechSteps(false);
      setCurrentTechMessageId(null);
    } else {
      setShowTechSteps(true);
      setCurrentTechMessageId(messageId);
    }
  };

  const playStepVoice = (stepText) => {
    const utterance = new SpeechSynthesisUtterance(stepText);
    if (voiceLanguage === "chinese") {
      utterance.lang = "zh-TW";
    } else if (voiceLanguage === "taiwanese") {
      utterance.lang = "zh-TW";
    }
    speechSynthesis.speak(utterance);
  };

  const handleStepComplete = (stepId) => {
    setCompletedSteps(prev => {
      if (prev.includes(stepId)) {
        return prev.filter(id => id !== stepId);
      } else {
        const newCompleted = [...prev, stepId];
        if (newCompleted.length === techSteps.length && techSteps.length > 0) {
          setTimeout(() => {
            setShowTechSteps(false);
            setCurrentTechMessageId(null);
            setCompletedSteps([]);
            setTechSteps([]);
          }, 1000);
        }
        return newCompleted;
      }
    });
  };

  const scrollToBottom = () => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages, isAiThinking]);

  useEffect(() => {
    return () => {
      if (settingsTimerRef.current) {
        clearTimeout(settingsTimerRef.current);
      }
    };
  }, []);

  const getTestTechSteps = () => [
    { id: 1, description: "Á¢∫Ë™çË®≠ÂÇôÂ∑≤Ê≠£Á¢∫ÈÄ£Êé•ÈõªÊ∫ê" },
    { id: 2, description: "Èï∑ÊåâÈõªÊ∫êÈçµÈáçÊñ∞ÂïüÂãï" },
    { id: 3, description: "Á¢∫Ë™çWiFiÊàñÁ∂≤Ë∑ØÁ∑öÈÄ£Êé•Ê≠£Â∏∏" },
    { id: 4, description: "Ê™¢Êü•‰∏¶ÂÆâË£ùÊúÄÊñ∞ÁöÑËªüÈ´îÊõ¥Êñ∞" },
    { id: 5, description: "Â¶ÇÂïèÈ°åÊåÅÁ∫åÔºåË´ãËÅØÁπ´ÂÆ¢Êúç‰∫∫Âì°" }
  ];

  const getTestMarkdownReply = (userMessage) => {
    const testReplies = [
      `ÈÄôÊòØ‰∏ÄÂÄãÂåÖÂê´ **Á≤óÈ´îÊñáÂ≠ó** Âíå *ÊñúÈ´îÊñáÂ≠ó* ÁöÑÂõûË¶Ü„ÄÇ

# ‰∏ªÊ®ôÈ°å
## ÂâØÊ®ôÈ°å
### Â∞èÊ®ôÈ°å

ÈÄôË£°Êúâ‰∏Ä‰∫õÁ®ãÂºèÁ¢ºÔºö\`console.log("Hello World")\`

‰ª•ÂèäÁ®ãÂºèÁ¢ºÂçÄÂ°äÔºö
\`\`\`javascript
function greet(name) {
  return "Hello, " + name + "!";
}
\`\`\`

ÈÇÑÊúâ‰∏ÄÂÄãÈÄ£ÁµêÔºö[Google](https://www.google.com)

‰ª•ÂèäÂàóË°®Ôºö
- È†ÖÁõÆ‰∏Ä
- È†ÖÁõÆ‰∫å
- È†ÖÁõÆ‰∏â`,

      `ÊàëÂèØ‰ª•Âπ´‰Ω†Ëß£Ê±∫ÊäÄË°ìÂïèÈ°åÔºÅÈÄôË£°ÊòØ‰∏Ä‰∫õÂ∏∏Ë¶ãÁöÑËß£Ê±∫ÊñπÊ°àÔºö

## Â∏∏Ë¶ãÂïèÈ°åËß£Ê±∫Ê≠•È©ü

1. **Ê™¢Êü•Á∂≤Ë∑ØÈÄ£Á∑ö**
2. *ÈáçÊñ∞ÂïüÂãïË£ùÁΩÆ*
3. Ê∏ÖÈô§Âø´ÂèñË≥áÊñô

\`\`\`bash
# Ê∏ÖÈô§Âø´ÂèñÁöÑÊåá‰ª§
rm -rf ~/.cache
\`\`\`

Êõ¥Â§öË≥áË®äË´ãÂèÉËÄÉÔºö[ÊäÄË°ìÊîØÊè¥Êñá‰ª∂](https://example.com)`,

      `**Ëß£Á≠îÔºö** Ê†πÊìöÊÇ®ÁöÑÂïèÈ°åÔºåÊàëÂª∫Ë≠∞ÊÇ®Ôºö

### Ê≠•È©ü‰∏ÄÔºöÂü∫Êú¨Ê™¢Êü•
- Á¢∫Ë™ç \`Ë®≠ÂÆö\` ÊòØÂê¶Ê≠£Á¢∫
- Ê™¢Êü• **Á≥ªÁµ±ÁãÄÊÖã**

### Ê≠•È©ü‰∫åÔºöÈÄ≤ÈöéËôïÁêÜ
\`\`\`
sudo systemctl restart service
\`\`\`

*Â∏åÊúõÈÄôÂÄãÂõûÁ≠îÂ∞çÊÇ®ÊúâÂπ´Âä©ÔºÅ*`
    ];
    return testReplies[Math.floor(Math.random() * testReplies.length)];
  };

  const handleDemoSend = (text, isTechStepRequest = false, stepIndex = null) => {
    if (!text.trim()) return;

    if (messages.length === 0) {
      setShowLogo(false);
    }

    const userMessageText = isTechStepRequest ? `ÈóúÊñºÁ¨¨ ${stepIndex + 1} Ê≠•Ôºö${text}` : text;
    setMessages((prev) => [...prev, { type: "user", text: userMessageText, id: Date.now() }]);

    setIsAiThinking(true);

    // ËôïÁêÜÊäÄË°ìÊ≠•È©üË©¢ÂïèÁöÑÈÇèËºØ
    if (isTechStepRequest) {
      setTimeout(() => {
        setIsAiThinking(false);
        setMessages((prev) => [
          ...prev,
          {
            type: "ai",
            text: `Â•ΩÁöÑÔºåÈóúÊñºÊ≠•È©ü ${stepIndex + 1} ÁöÑÂïèÈ°åÔºåÊàëÊúÉÊèê‰æõÊõ¥Ë©≥Á¥∞ÁöÑË™™Êòé„ÄÇË´ãÊÇ®ÂÜçË©¶Ë©¶ÁúãÔºö**${text}**„ÄÇ`,
            id: Date.now() + 1
          },
        ]);
        // ‰øùÊåÅÊäÄË°ìÊ≠•È©üÈù¢ÊùøÈñãÂïü
        setShowTechSteps(true);
      }, 1500);
      return;
    }

    const isTechQuestion = text.toLowerCase().includes('ÈõªËÖ¶') ||
      text.toLowerCase().includes('Á∂≤Ë∑Ø') ||
      text.toLowerCase().includes('ÊâãÊ©ü') ||
      text.toLowerCase().includes('ÂïèÈ°å') ||
      text.toLowerCase().includes('ÊïÖÈöú') ||
      text.includes('ÊäÄË°ì');

    if (isTechQuestion) {
      setTimeout(() => {
        setIsAiThinking(false);
        const aiMessageId = Date.now() + 1;
        setMessages((prev) => [...prev, {
          type: "ai",
          text: "Êàë‰∫ÜËß£ÊÇ®ÈÅáÂà∞‰∫ÜÊäÄË°ìÂïèÈ°å„ÄÇËÆìÊàëÁÇ∫ÊÇ®Êèê‰æõ‰∏Ä‰∫õËß£Ê±∫Ê≠•È©üÔºåÊÇ®ÂèØ‰ª•ÊåâÁÖßÈ†ÜÂ∫èÂòóË©¶„ÄÇ",
          id: aiMessageId,
          isTechRelated: true
        }]);
        setTechSteps(getTestTechSteps());
        setCompletedSteps([]);
        setCurrentTechMessageId(aiMessageId);
      }, 1500);
      return;
    }

    if (text.toLowerCase().includes('markdown') || text.includes('Ê∏¨Ë©¶')) {
      setTimeout(() => {
        setIsAiThinking(false);
        setMessages((prev) => [...prev, {
          type: "ai",
          text: getTestMarkdownReply(text),
          id: Date.now() + 1
        }]);
      }, 1500);
      return;
    }

    setTimeout(() => {
      setIsAiThinking(false);
      setMessages((prev) => [
        ...prev,
        { type: "ai", text: "ÈÄôÊòØ‰∏ÄÂÄãÈùûÊäÄË°ìÈ°ûÂïèÈ°åÁöÑÈÄöÁî®ÂõûË¶Ü„ÄÇ", id: Date.now() + 1 },
      ]);
    }, 1500);
  }


  const handleSend = async (text, isTechStepRequest = false, stepIndex = null) => {
    if (!text.trim()) return;

    if (isLocalDemo) {
      handleDemoSend(text, isTechStepRequest, stepIndex);
      return;
    }

    if (messages.length === 0) {
      setShowLogo(false);
    }

    const messageId = Date.now();
    const userMessageText = isTechStepRequest ? `ÈóúÊñºÁ¨¨ ${stepIndex + 1} Ê≠•Ôºö${text}` : text;
    setMessages((prev) => [...prev, { type: "user", text: userMessageText, id: messageId }]);

    setIsAiThinking(true);

    try {
      const apiUrl = isTechStepRequest ? "http://localhost:5000/tech-ai" : "http://localhost:5000/ai";
      const requestBody = isTechStepRequest ?
      { step_index: stepIndex, question: text } :
      { message: text };

      const response = await fetch(apiUrl, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(requestBody),
      });

      const data = await response.json();

      setIsAiThinking(false);
      const aiMessageId = Date.now() + 1;

      let isTechRelated = data.class === 1;

      setMessages((prev) => [...prev, {
        type: "ai",
        text: data.reply,
        id: aiMessageId,
        isTechRelated: isTechRelated
      }]);

      if (isTechRelated) {
        const techStepsData = data.tech_steps || getTestTechSteps();
        setTechSteps(techStepsData);
        setCompletedSteps([]);
        setCurrentTechMessageId(aiMessageId);
      }

    } catch (err) {
      setIsAiThinking(false);
      setMessages((prev) => [
        ...prev,
        { type: "ai", text: "Êä±Ê≠âÔºåÊàëÊö´ÊôÇÁÑ°Ê≥ïÂõûË¶Ü üò¢", id: Date.now() + 1 },
      ]);
    }
  };

  const handleVoiceInput = () => {
    if (!("webkitSpeechRecognition" in window)) {
      alert("‰Ω†ÁöÑÁÄèË¶ΩÂô®‰∏çÊîØÊè¥Ë™ûÈü≥Ëæ®Ë≠ò");
      return;
    }
    if (!recognitionRef.current) {
      const recognition = new window.webkitSpeechRecognition();
      recognition.lang = "zh-TW";
      recognition.interimResults = false;
      recognition.maxAlternatives = 1;
      recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        handleSend(transcript);
        setListening(false);
      };
      recognition.onerror = (event) => {
        console.error("Speech recognition error:", event.error);
        setListening(false);
      };
      recognitionRef.current = recognition;
    }
    if (!listening) {
      recognitionRef.current.start();
      setListening(true);
    }
  };

  const handleInputSend = () => {
    handleSend(inputText);
    setInputText("");
  };

  const playVoice = (text) => {
    const cleanText = text.replace(/<[^>]*>/g, ' ').replace(/\s+/g, ' ').trim();
    const utterance = new SpeechSynthesisUtterance(cleanText);
    if (voiceLanguage === "chinese") {
      utterance.lang = "zh-TW";
    } else if (voiceLanguage === "taiwanese") {
      utterance.lang = "zh-TW";
    }
    speechSynthesis.speak(utterance);
  };

  const stopVoice = () => {
    speechSynthesis.cancel();
  };

  const handleEmailSubmit = async () => {
    if (!email.trim()) {
      alert("Ë´ãËº∏ÂÖ•ÊúâÊïàÁöÑ Gmail Âú∞ÂùÄ");
      return;
    }
    try {
      if (demoMode) {
        const response = await fetch("http://localhost:5000/send_email", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ email: email }),
        });
        const data = await response.json();
        if (data.status === "success") {
          alert(`üé¨ Demo Ê®°ÂºèÔºöÂ∑≤ÊàêÂäüÁôºÈÄÅËá≥ ${email}\n\nÂäüËÉΩÂ±ïÁ§∫ÂÆåÊàêÔºÅ`);
        } else {
          alert("ÁôºÈÄÅÂ§±ÊïóÔºåË´ãÁ®çÂæåÂÜçË©¶");
        }
        console.log("Demo Ê®°Âºè - ÁôºÈÄÅÂ†±ÂëäÂà∞:", email);
        console.log("Â∞çË©±ÂÖßÂÆπ:", messages);
      } else {
        const response = await fetch("http://localhost:5000/change_email_address", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ new_email: email }),
        });
        const data = await response.json();
        if (data.status === "success") {
          alert(`Email Âú∞ÂùÄÂ∑≤ÊàêÂäüÊõ¥Êñ∞ÁÇ∫: ${email}`);
        } else {
          alert("Êõ¥Êñ∞Â§±ÊïóÔºåË´ãÁ®çÂæåÂÜçË©¶");
        }
        console.log("Êõ¥Êñ∞ Email Âú∞ÂùÄ:", email);
      }
    } catch (error) {
      console.error("API Ë™øÁî®Â§±Êïó:", error);
      alert("Á∂≤Ë∑ØÈåØË™§ÔºåË´ãÊ™¢Êü•ÈÄ£Á∑öÂæåÂÜçË©¶");
    }
  };

  const resetAutoCloseTimer = () => {
    if (settingsTimerRef.current) {
      clearTimeout(settingsTimerRef.current);
    }
    settingsTimerRef.current = setTimeout(() => {
      setShowSettings(false);
      settingsTimerRef.current = null;
    }, 5000);
  };

  const handlePanelInteraction = () => {
    resetAutoCloseTimer();
  };

  const toggleSettings = () => {
    if (showSettings) {
      if (settingsTimerRef.current) {
        clearTimeout(settingsTimerRef.current);
        settingsTimerRef.current = null;
      }
      setShowSettings(false);
    } else {
      setShowSettings(true);
      resetAutoCloseTimer();
    }
  };

  return (
    <div className="app-container">
      <div className="settings-icon" onClick={toggleSettings}>
        ‚öôÔ∏è
      </div>
      {showSettings && (
        <div className="settings-panel" onMouseEnter={handlePanelInteraction} onClick={handlePanelInteraction}>
          <h3>Ë®≠ÂÆö</h3>
          <div className="demo-mode">
            <label>
              <input
                type="checkbox"
                checked={demoMode}
                onChange={(e) => {
                  setDemoMode(e.target.checked);
                  handlePanelInteraction();
                }}
              />
              üé¨ ÈªëÂÆ¢Êùæ Demo Ê®°Âºè
            </label>
          </div>
          <div className="demo-mode">
            <label>
              <input
                type="checkbox"
                checked={isLocalDemo}
                onChange={(e) => {
                  setIsLocalDemo(e.target.checked);
                  handlePanelInteraction();
                }}
              />
              üì¶ Êú¨Âú∞Ê®°Êì¨Ê∏¨Ë©¶
            </label>
          </div>
          <div className="email-input">
            <label>Â≠êÂ•≥ Gmail ‰ø°ÁÆ±Ôºö</label>
            <input
              type="email"
              value={email}
              onChange={(e) => {
                setEmail(e.target.value);
                handlePanelInteraction();
              }}
              onFocus={handlePanelInteraction}
              placeholder="Ëº∏ÂÖ• Gmail Âú∞ÂùÄ"
            />
            <button onClick={() => {
              handleEmailSubmit();
              handlePanelInteraction();
            }}>
              {demoMode ? "üé¨ Ê®°Êì¨ÁôºÈÄÅÂ†±Âëä" : "Êèê‰∫§"}
            </button>
          </div>
          <div className="voice-output">
            <label>Ë™ûÈü≥Ëº∏Âá∫Ë™ûË®ÄÔºö</label>
            <div className="voice-toggle">
              <button
                className={`toggle-btn ${voiceLanguage === "chinese" ? "active" : ""}`}
                onClick={() => {
                  setVoiceLanguage("chinese");
                  handlePanelInteraction();
                }}
              >
                ‰∏≠Êñá
              </button>
              <button
                className={`toggle-btn ${voiceLanguage === "taiwanese" ? "active" : ""}`}
                onClick={() => {
                  setVoiceLanguage("taiwanese");
                  handlePanelInteraction();
                }}
              >
                Âè∞Ë™û
              </button>
            </div>
          </div>
        </div>
      )}
      {showTechSteps && (
        <div className="tech-steps-panel">
          <div className="tech-steps-header">
            <h3>üîß Ëß£Ê±∫Ê≠•È©ü</h3>
            <button
              className="close-steps-btn"
              onClick={() => setShowTechSteps(false)}
            >
              ‚úï
            </button>
          </div>
          <div className="tech-steps-list">
            {techSteps.map((step, index) => (
              <div
                key={step.id}
                className={`tech-step ${completedSteps.includes(step.id) ? 'completed' : ''}`}
              >
                <div className="step-checkbox">
                  <input
                    type="checkbox"
                    id={`step-${step.id}`}
                    checked={completedSteps.includes(step.id)}
                    onChange={() => handleStepComplete(step.id)}
                  />
                  <label htmlFor={`step-${step.id}`}></label>
                </div>
                <div className="step-content">
                  <div className="step-number">{index + 1}</div>
                  <div className="step-details">
                    <p>{step.description}</p>
                  </div>
                </div>
                <button
                  className="step-voice-btn"
                  onClick={() => playStepVoice(`${step.description}`)}
                >
                  üîä
                </button>
                <button
                  className="ask-ai-btn"
                  onClick={() => {
                    const questionPrefix = `ÈóúÊñºÊ≠•È©ü ${index + 1}Ôºö`;
                    setInputText(questionPrefix);
                  }}
                >
                  Ë©¢Âïè AI
                </button>
              </div>
            ))}
          </div>
          {completedSteps.length === techSteps.length && techSteps.length > 0 && (
            <div className="completion-message">
              üéâ ÊâÄÊúâÊ≠•È©üÂ∑≤ÂÆåÊàêÔºÅÂàóË°®Â∞áËá™ÂãïÊî∂Ëµ∑...
            </div>
          )}
        </div>
      )}
      <div className={`logo-container ${!showLogo ? "fade-out" : ""}`}>
        <h1>
          Care<span className="highlight-ai">AI</span>de
        </h1>
      </div>
      <div className="chat-container" ref={chatContainerRef}>
        <div className="message-row left">
          <div className="message-bubble ai">
            ‰Ω†Â•ΩÔºåÊàëÊòØ‰Ω†ÁöÑÊäÄË°ìÂä©Êâã üòä
            <div className="voice-buttons">
              <button className="play-button" onClick={() => playVoice('‰Ω†Â•ΩÔºåÊàëÊòØ‰Ω†ÁöÑÊäÄË°ìÂä©Êâã')}>
                üîä Êí≠Êîæ
              </button>
            </div>
          </div>
        </div>
        {messages.map((msg, idx) => (
          <div
            key={idx}
            className={`message-row ${msg.type === "user" ? "right" : "left"}`}
          >
            <div className={`message-bubble ${msg.type}`}>
              <MessageContent
                text={msg.text}
                type={msg.type}
                messageId={msg.id}
                isTechRelated={msg.isTechRelated}
              />
              {msg.type === "ai" && (
                <div className="voice-buttons">
                  <button
                    className="play-button"
                    onClick={() => playVoice(msg.text)}
                  >
                    üîä Êí≠Êîæ
                  </button>
                  <button
                    className="stop-button"
                    onClick={stopVoice}
                  >
                    ‚èπÂÅúÊ≠¢
                  </button>
                </div>
              )}
            </div>
          </div>
        ))}
        {isAiThinking && (
          <div className="message-row left">
            <div className="message-bubble ai thinking">
              <div className="thinking-indicator">
                <div className="spinner"></div>
                <span className="thinking-text">ÊÄùËÄÉ‰∏≠...</span>
              </div>
            </div>
          </div>
        )}
      </div>
      <div className="input-container">
        <input
          type="text"
          value={inputText}
          onChange={(e) => setInputText(e.target.value)}
          onKeyPress={(e) => {
            if (e.key === 'Enter') {
              const techStepQuestionMatch = inputText.match(/^ÈóúÊñºÊ≠•È©ü (\d+) \((.*?)\)Ôºö/);
              if (techStepQuestionMatch) {
                const stepIndex = parseInt(techStepQuestionMatch[1], 10) - 1;
                const questionText = inputText.substring(techStepQuestionMatch[0].length).trim();
                handleSend(questionText, true, stepIndex);
              } else {
                handleInputSend();
              }
              setInputText("");
            }
          }}
          placeholder="Ëº∏ÂÖ•Ë®äÊÅØ..."
          className="text-input"
          disabled={isAiThinking}
        />
        <button
          onClick={() => {
            const techStepQuestionMatch = inputText.match(/^ÈóúÊñºÊ≠•È©ü (\d+)Ôºö/);
            if (techStepQuestionMatch) {
              const stepIndex = parseInt(techStepQuestionMatch[1], 10) - 1;
              const questionText = inputText.substring(techStepQuestionMatch[0].length).trim();
              handleSend(questionText, true, stepIndex);
            } else {
              handleInputSend();
            }
            setInputText("");
          }}
          disabled={isAiThinking}
        >
          ÂÇ≥ÈÄÅÊñáÂ≠ó
        </button>
        <button
          onClick={handleVoiceInput}
          className={listening ? "recording" : ""}
          disabled={isAiThinking}
        >
          ÈñãÂßãÈåÑÈü≥
        </button>
      </div>
    </div>
  );
}